@using Entities
@using Business
@inject NavigationManager NavManager
@inject SweetAlertService SweetAlert

<div>
    <EditForm Model="ObProduct">

        <div class="form-group">
            <label class="form-label">Nombre del producto:</label>
            <InputText @bind-Value="ObProduct.ProductName" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Descripción:</label>
            <InputTextArea @bind-Value="ObProduct.ProductDescription" class="form-control" />
        </div>

        <div class="form-group">
            <label class="form-label">Categoría:</label>
            <InputSelect @bind-Value="ObProduct.CategoryId" class="form-control">
                @foreach (var category in CategoriesList)
                {
                    <option value="@category.CategoryId">@category.CategoryName</option>
                }
            </InputSelect>
        </div>

        <hr />
        <div>
            <button type="button" class="btn btn-primary" @onclick="UpdateProduct">Actualizar Producto</button>
            <button type="button" class="btn btn-danger" @onclick="RemoveProduct">Eliminar Producto</button>
        </div>
        <hr />

    </EditForm>
</div>

@code {
    ProductEntity ObProduct = new ProductEntity();
    List<CategoryEntity> CategoriesList = new List<CategoryEntity>();

    [Parameter]
    public string IdProduct { get; set; }

    protected override async Task OnInitializedAsync()
    {
        ObProduct = B_Product.ProductById(IdProduct);
        CategoriesList = B_Category.CategoryList();
    }

    private void UpdateProduct()
    {
        B_Product.UpdateProduct(ObProduct);
        NavManager.NavigateTo("product/list");
    }

    private async void RemoveProduct()
    {
        SweetAlertResult resultado = await SweetAlert.FireAsync(new SweetAlertOptions
            {
                Title = "Quieres eliminar el producto " + ObProduct.ProductName,
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Si",
                CancelButtonText = "No"
        });

        if (!string.IsNullOrEmpty(resultado.Value))
        {
            await SweetAlert.FireAsync(
              "El producto fue eliminado" ,
              "El producto fue eliminado con éxito.",
              SweetAlertIcon.Success
              );

            B_Product.RemoveProduct(ObProduct);
            NavManager.NavigateTo("product/list");
        }
        else if (resultado.Dismiss == DismissReason.Cancel)
        {
    
        }
    }
}

